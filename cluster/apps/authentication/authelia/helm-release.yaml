---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &appname authelia
  namespace: networking
spec:
  interval: 5m
  chart:
    spec:
      chart: *appname
      version: 0.8.38
      sourceRef:
        kind: HelmRepository
        name: authelia-charts
        namespace: flux-system
      interval: 5m
  dependsOn:
    - name: cert-manager
      namespace: cert-manager
  install:
    createNamespace: true
    remediation:
      retries: 4
  upgrade:
    remediation:
      retries: 4
        #  postRenderers:
        #  - kustomize: 
        #      patchesStrategicMerge:
        #        - kind: Deployment
        #          apiVersion: apps/v1
        #          metadata:
        #            name: authelia
        #          spec:
        #            template:
        #              spec:
        #                initContainers:
        #                - name: init-db
        #                  image: ghcr.io/onedr0p/postgres-initdb:14.5
        #                  env:
        #                    - name: POSTGRES_HOST
        #                      value: defaultpg-rw.databases.svc.cluster.local
        #                    - name: POSTGRES_DB
        #                      value: authelia-dev
        #                    - name: POSTGRES_SUPER_PASS
        #                      valueFrom:
        #                        secretKeyRef:
        #                          name: postgres-superuser
        #                          key: password
        #                    - name: POSTGRES_USER
        #                      value: authelia-dev
        #                    - name: POSTGRES_PASS
        #                      value: authelia
  values:
    image:
      repository: ghcr.io/authelia/authelia
      tag: 4.37.5
      pullPolicy: IfNotPresent
    deployment:
      kind: Deployment
      replicas: 1
    service:
      enabled: true
      type: LoadBalancer
      port: 80
      spec:
        loadBalancerIP: "${SVC_AUTHELIA_ADDR}"
        externalTrafficPolicy: Local
      annotations:
        metallb.universe.tf/address-pool: dev-infra
    pod:
      # Must be Deployment, DaemonSet, or StatefulSet.
      kind: Deployment
      replicas: 1

    envFrom:
      - secretRef:
          name: *appname

    ## Authelia Domain
    ## Should be the root domain you want to protect.
    ## For example if you have apps app1.example.com and app2.example.com it should be example.com
    ## This affects the ingress (partially sets the domain used) and configMap.
    ## Authelia must be served from the domain or a subdomain under it.
    domain: ${SECRET_DEV_DOMAIN}

    ##
    ## Authelia Config Map Generator
    ##
    configMap:
      enabled: true
    
      annotations: {}
      labels: {}
    
      key: configuration.yaml
    
      existingConfigMap: ""
    
      log:
        level: debug
        format: text
        ## File path where the logs will be written. If not set logs are written to stdout.
        # file_path: /config/authelia.log
        file_path: /config/authelia.log
    
      ##
      ## Telemetry Configuration
      ##
      telemetry:
        metrics:
          enabled: false
          port: 9959
    
          serviceMonitor:
            enabled: false
            annotations: {}
            labels: {}
    
      default_redirection_url: https://authelia.${SECRET_DEV_DOMAIN}
    
      ## Options are totp, webauthn, mobile_push.
      default_2fa_method: ""
    
      theme: light
    
      ##
      ## TOTP Configuration
      ##
      totp:
        disable: false
        issuer: ${SECRET_DEV_DOMAIN}
        algorithm: sha1
        digits: 6
        period: 30
        skew: 1
    
      ##
      ## WebAuthn Configuration
      ##
      webauthn:
        disable: false
        timeout: 60s
        display_name: ${SECRET_DEV_DOMAIN}
        ## Options are none, indirect, direct.
        attestation_conveyance_preference: indirect
        ## Options are required, preferred, discouraged.
        user_verification: preferred
    
      ##
      ## Duo Push API Configuration
      ##
      ## Parameters used to contact the Duo API. Those are generated when you protect an application of type
      ## "Partner Auth API" in the management panel.
      duo_api:
        enabled: true
        hostname: api-b68b8774.duosecurity.com
        integration_key: DI2IGENLJKFDHSKGWT1L
        enable_self_enrollment: true
    
      ##
      ## Authentication Backend Provider Configuration
      ##
      authentication_backend:
        password_reset:
          disable: false
          custom_url: ""
    
        refresh_interval: 5m
    
        ## LDAP backend configuration.
        ##
        ldap:
          enabled: true
          implementation: custom
          url: ldap://${NAS_ADDR}
          timeout: 5s
          start_tls: false
    
          tls:
            server_name: ""
            skip_verify: false
            minimum_version: TLS1.2
    
          base_dn: dc=kao,dc=family
    
          username_attribute: uid
          additional_users_dn: cn=users
          users_filter: (&({username_attribute}={input})(objectClass=posixAccount))
    
          additional_groups_dn: cn=groups
          groups_filter: (&(member={dn})(objectclass=posixGroup))
          group_name_attribute: cn
    
          mail_attribute: mail
    
          display_name_attribute: displayName 
    
          permit_referrals: false
    
          ## Strongly discouraged. See https://www.authelia.com/configuration/first-factor/ldap/#permit_unauthenticated_bind.
          permit_unauthenticated_bind: false
    
          ## The username of the admin user.
          user: uid=autheliauser,cn=users,dc=kao,dc=family
    
      ##
      ## Password Policy Configuration.
      ##
      password_policy:
        standard:
          enabled: false
          min_length: 8
          max_length: 0
          require_uppercase: true
          require_lowercase: true
          require_number: true
          require_special: true
    
        ## zxcvbn is a well known and used password strength algorithm. It does not have tunable settings.
        zxcvbn:
          enabled: false
          min_score: 0
    
      ##
      ## Access Control Configuration
      ##
      ## Access control is a list of rules defining the authorizations applied for one resource to users or group of users.
      ##
      ## If 'access_control' is not defined, ACL rules are disabled and the 'bypass' rule is applied, i.e., access is allowed
      ## to anyone. Otherwise restrictions follow the rules defined.
      ##
      ## Note: One can use the wildcard * to match any subdomain.
      ## It must stand at the beginning of the pattern. (example: *.mydomain.com)
      ##
      ## Note: You must put patterns containing wildcards between simple quotes for the YAML to be syntactically correct.
      ##
      ## Definition: A 'rule' is an object with the following keys: 'domain', 'subject', 'policy' and 'resources'.
      ##
      ## - 'domain' defines which domain or set of domains the rule applies to.
      ##
      ## - 'subject' defines the subject to apply authorizations to. This parameter is optional and matching any user if not
      ##    provided. If provided, the parameter represents either a user or a group. It should be of the form
      ##    'user:<username>' or 'group:<groupname>'.
      ##
      ## - 'policy' is the policy to apply to resources. It must be either 'bypass', 'one_factor', 'two_factor' or 'deny'.
      ##
      ## - 'resources' is a list of regular expressions that matches a set of resources to apply the policy to. This parameter
      ##   is optional and matches any resource if not provided.
      ##
      ## Note: the order of the rules is important. The first policy matching (domain, resource, subject) applies.
      access_control:
        secret:
          enabled: false
          key: configuration.acl.yaml
          existingSecret: ""
    
        default_policy: deny
    
        networks:
        - name: private
          networks:
          - 10.0.0.0/8
          - 172.16.0.0/12
          - 192.168.0.0/16
    
        rules:
        - domain: authelia.${SECRET_DEV_DOMAIN}
          policy: bypass
        # Require 2fa in all access modes
        - domain:
            - "dsm.${SECRET_DEV_DOMAIN}"
            - "guac.${SECRET_DEV_DOMAIN}"
            - "amole.${SECRET_DEV_DOMAIN}"
          policy: two_factor
        # Local only bypass policies
        - domain: 
            - "ldap.${SECRET_DEV_DOMAIN}"
          policy: bypass
          networks:
            - private
        # Public bypass policies
        - domain: 
            #media
            - "w.${SECRET_DEV_DOMAIN}"
            #synology
            - "drive.${SECRET_DEV_DOMAIN}"
              #- "drive.${ SECRET_PROD_DOMAIN_KF}"
            - "moments.${SECRET_DEV_DOMAIN}"
              #- "moments.${SECRET_PROD_DOMAIN_KF}"
            #utilities
            - "status.${SECRET_DEV_DOMAIN}"
            - "vault.${SECRET_PROD_DOMAIN_MGO}"
            - "vault.${SECRET_DEV_DOMAIN}"
            #storage
            - "s3.${SECRET_DEV_DOMAIN}"

          policy: bypass
        # Local only policies
        - domain: 
            - "*.${SECRET_DEV_DOMAIN}"
          policy: one_factor
          networks:
            - private
        # Public services - 2 Factor
        - domain:
            - "traefik.${SECRET_DEV_DOMAIN}"
            #media
            - "tautulli.${SECRET_DEV_DOMAIN}"
            - "bazarr.${SECRET_DEV_DOMAIN}"
            - "sonarr.${SECRET_DEV_DOMAIN}"
            - "radarr.${SECRET_DEV_DOMAIN}"
            - "nzbget.${SECRET_DEV_DOMAIN}"
            - "nzbhydra.${SECRET_DEV_DOMAIN}"
            - "calibre.${SECRET_DEV_DOMAIN}"
            - "change.${SECRET_DEV_DOMAIN}"
            - "dl.${SECRET_DEV_DOMAIN}"
            #monitoring
            - "chronograf.${SECRET_DEV_DOMAIN}"
            - "loki.${SECRET_DEV_DOMAIN}"
            - "grafana.${SECRET_DEV_DOMAIN}"
            - "prom.${SECRET_DEV_DOMAIN}"
            #utilities
            - "echo.${SECRET_DEV_DOMAIN}"
            - "firefox.${SECRET_DEV_DOMAIN}"
            - "guac.${SECRET_DEV_DOMAIN}"
            - "amole.${SECRET_DEV_DOMAIN}"
            - "oauth-debug.${SECRET_DEV_DOMAIN}"
            - "pgadmin.${SECRET_DEV_DOMAIN}"
            - "phpmyadmin.${SECRET_DEV_DOMAIN}"
            - "portainer.${SECRET_DEV_DOMAIN}"
            - "proxmox.${SECRET_DEV_DOMAIN}"
            #storage
            - "minio.${SECRET_DEV_DOMAIN}"
            - "longhorn.${SECRET_DEV_DOMAIN}"
            #iot
            - "nodered.${SECRET_DEV_DOMAIN}"


          policy: two_factor
        # Public services - 1 Factor
        - domain:
            #media
            - "library.${SECRET_DEV_DOMAIN}"
            - "plex.${SECRET_DEV_DOMAIN}"
            #utilitie
            - "hajimari.${SECRET_DEV_DOMAIN}"
            - "speed.${SECRET_DEV_DOMAIN}"
          policy: one_factor
        # rules:
        # - domain_regex: '^.*\.example.com$'
        #   policy: bypass
        # - domain: public.example.com
        #   policy: bypass
        # - domain: "*.example.com"
        #   policy: bypass
        #   methods:
        #   - OPTIONS
        # - domain: secure.example.com
        #   policy: one_factor
        #   networks:
        #   - private
        #   - vpn
        #   - 192.168.1.0/24
        #   - 10.0.0.1
        # - domain:
        #   - secure.example.com
        #   - private.example.com
        #   policy: two_factor
        # - domain: singlefactor.example.com
        #   policy: one_factor
        # - domain: "mx2.mail.example.com"
        #   subject: "group:admins"
        #   policy: deny
        # - domain: "*.example.com"
        #   subject:
        #   - "group:admins"
        #   - "group:moderators"
        #   policy: two_factor
        # - domain: dev.example.com
        #   resources:
        #   - "^/groups/dev/.*$"
        #   subject: "group:dev"
        #   policy: two_factor
        # - domain: dev.example.com
        #   resources:
        #   - "^/users/john/.*$"
        #   subject:
        #   - ["group:dev", "user:john"]
        #   - "group:admins"
        #   policy: two_factor
        # - domain: "{user}.example.com"
        #   policy: bypass
    
      ##
      ## Session Provider Configuration
      ##
      session:
        name: thekaocloud_auth_session
        same_site: lax
        expiration: 1h
        inactivity: 5m
        remember_me_duration: 1M
    
        ##
        ## Redis Provider
        ##
        redis:
          enabled: false
          enabledSecret: false
          host: ${RURI_ADDR}
          port: 6379
          username: ""
          database_index: 0
          maximum_active_connections: 8
          minimum_idle_connections: 0
    
          tls:
            enabled: false
    
      ##
      ## Regulation Configuration
      ##
      ## This mechanism prevents attackers from brute forcing the first factor. It bans the user if too many attempts are done
      ## in a short period of time.
      regulation:
        max_retries: 3
        find_time: 2m
        ban_time: 5m
    
      ##
      ## Storage Provider Configuration
      ##
      storage:
        ##
        ## MySQL (Storage Provider)
        ##
        mysql:
          enabled: true
          host: ${RURI_ADDR}
          port: 3306
          database: authelia-k3s
          username: authelia-k3s
          password: authelia
          timeout: 10s

        postgres:
          enabled: false
          host: defaultpg-rw.databases.svc.cluster.local
          port: 5432
          database: authelia-dev
          schema: public
          username: authelia-dev
          password: authelia
          ssl:
            mode: disable
            
        #encryption_key: pPubSmumpvj8vyZhMEfH1OHSsk6HoZiU9YPYBklCiYyjtOwCE8LXIEj6B2iQsyJh
        #local:
        #  path: /config/db.sqlite3
    
      ##
      ## Notification Provider
      ##
      ##
      notifier:
        disable_startup_check: true
    
        ##
        ## SMTP (Notification Provider)
        ##
        smtp:
          enabled: true
          enabledSecret: true
          host: smtp.gmail.com
          port: 587
          timeout: 5s
          username: ruri@lenaxia.net
          sender: ruri@lenaxia.net
          identifier: localhost
          subject: "[TheKaoCloud] {title}"
    
      identity_providers:
        oidc:
          ## Enables this in the config map. Currently in beta stage.
          ## See https://www.authelia.com/r/openid-connect/
          enabled: true
    
          access_token_lifespan: 1h
          authorize_code_lifespan: 1m
          id_token_lifespan: 1h
          refresh_token_lifespan: 90m
    
          enable_client_debug_messages: false
    
          ## Cross-Origin Resource Sharing (CORS) settings.
          cors:
            ## List of endpoints in addition to the metadata endpoints to permit cross-origin requests on.
            endpoints: ["authorization", "token", "revocation", "introspection", "userinfo"]
            allowed_origins_from_client_redirect_uris: true
    
          clients:
          - id: openidconnect-test
            description: openidconnect-test
            secret: "${SECRET_TEST_OAUTH_CLIENT_SECRET}"
            public: false
            authorization_policy: one_factor
            pre_configured_consent_duration: 1y
            scopes: ["openid", "profile", "groups", "email"]
            redirect_uris: ["https://oidcdebugger.com/debug", "https://openidconnect.net/callback", "https://w.${SECRET_DEV_DOMAIN}/oidc/callback", "https://oauth-debug.thekao.cloud/callback"]
            userinfo_signing_algorithm: none
          - id: vdsm7
            description: vdsm7 
            secret: "${SECRET_TEST_OAUTH_CLIENT_SECRET}"
            public: false
            authorization_policy: one_factor
            pre_configured_consent_duration: 1y
            scopes: ["openid", "profile", "groups", "email"]
            redirect_uris: ["https://vdsm-photos.kao.family/#/signin", "http://192.168.0.169:5000/#/signin"]
            userinfo_signing_algorithm: none
          - id: bookstack
            description: bookstack
            secret: "${SECRET_BOOKSTACK_OAUTH_CLIENT_SECRET}"
            public: false
            authorization_policy: one_factor
            pre_configured_consent_duration: 1y
            scopes: ["openid", "profile", "groups", "email"]
            redirect_uris: ["https://w.${SECRET_DEV_DOMAIN}/oidc/callback"]
            userinfo_signing_algorithm: none
          - id: grafana
            description: grafana
            secret: "${SECRET_GRAFANA_OAUTH_CLIENT_SECRET}"
            public: false
            authorization_policy: one_factor
            pre_configured_consent_duration: 1y
            scopes: ["openid", "profile", "groups", "email"]
            redirect_uris: ["https://grafana.${SECRET_DEV_DOMAIN}/login/generic_oauth"]
            userinfo_signing_algorithm: none
          - id: outline
            description: outline
            secret: "${SECRET_OUTLINE_OAUTH_CLIENT_SECRET}"
            public: false
            authorization_policy: one_factor
            pre_configured_consent_duration: 1y
            scopes: ["openid", "profile", "email", "offline_access"]
            redirect_uris: ["https://w.${SECRET_DEV_DOMAIN}/auth/oidc.callback"]
            userinfo_signing_algorithm: none
            # -
              ## The ID is the OpenID Connect ClientID which is used to link an application to a configuration.
              # id: myapp
    
              ## The description to show to users when they end up on the consent screen. Defaults to the ID above.
              # description: My Application
    
              ## The client secret is a shared secret between Authelia and the consumer of this client.
              # secret: apple123
    
              ## Sector Identifiers are occasionally used to generate pairwise subject identifiers. In most cases this is not
              ## necessary. Read the documentation for more information.
              ## The subject identifier must be the host component of a URL, which is a domain name with an optional port.
              # sector_identifier: example.com
    
              ## Sets the client to public. This should typically not be set, please see the documentation for usage.
              # public: false
    
              ## The policy to require for this client; one_factor or two_factor.
              # authorization_policy: two_factor
    
              ## By default users cannot remember pre-configured consents. Setting this value to a period of time using a
              ## duration notation will enable users to remember consent for this client. The time configured is the amount
              ## of time the pre-configured consent is valid for granting new authorizations to the user.
              # pre_configured_consent_duration: 30d
    
              ## Audience this client is allowed to request.
              # audience: []
    
              ## Scopes this client is allowed to request.
              # scopes:
              #   - openid
              #   - profile
              #   - email
              #   - groups
    
              ## Redirect URI's specifies a list of valid case-sensitive callbacks for this client.
              # redirect_uris:
              #   - https://oidc.example.com/oauth2/callback
    
              ## Grant Types configures which grants this client can obtain.
              ## It's not recommended to configure this unless you know what you're doing.
              # grant_types:
              #   - refresh_token
              #   - authorization_code
    
              ## Response Types configures which responses this client can be sent.
              ## It's not recommended to configure this unless you know what you're doing.
              # response_types:
              #   - code
    
              ## Response Modes configures which response modes this client supports.
              ## It's not recommended to configure this unless you know what you're doing.
              # response_modes:
              #   - form_post
              #   - query
              #   - fragment
    
              ## The algorithm used to sign userinfo endpoint responses for this client, either none or RS256.
              # userinfo_signing_algorithm: none
    
    ##
    ## Authelia Secret Generator.
    ##
    ## If both the values and existingSecret are not defined, this chart randomly generates a new secret on each
    ## install. It is recommended that you use something like sealed-secrets (https://github.com/bitnami-labs/sealed-secrets)
    ## and use the existingSecrets. All secrets can be stored in a single k8s secret if desired using the key option.
    ##
    secret:
      existingSecret: *appname
    
      annotations: {}
      labels: {}
    
      mountPath: /secrets
    
      ## Secrets.
      jwt:
        key: JWT_SECRET
      ldap:
        key: LDAP_PASSWORD
      storage:
        key: STORAGE_PASSWORD
      storageEncryptionKey:
        key: STORAGE_ENCRYPTION_KEY
      session:
        key: SESSION_SECRET
      duo:
        key: DUO_SECRET_KEY
      redis:
        key: REDIS_PASSWORD
      redisSentinel:
        key: REDIS_SENTINEL_PASSWORD
      smtp:
        key: SMTP_PASSWORD
      oidcPrivateKey:
        key: OIDC_ISSUER_PRIVATE_KEY
      oidcHMACSecret:
        key: OIDC_HMAC_SECRET
    
    ##
    ## Authelia Persistence Configuration.
    ##
    #persistence:
    #  config:
    #    enabled: true
    #    type: configMap
    #    name: *appname
    #    subPath: configuration.yml
    #    mountPath: /config/configuration.yml
    #    readOnly: false
