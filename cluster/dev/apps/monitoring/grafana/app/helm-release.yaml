apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app grafana
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      chart: grafana
      version: 6.56.6
      sourceRef:
        kind: HelmRepository
        name: grafana-charts
        namespace: flux-system
      interval: 15m
  install:
    createNamespace: true
    remediation:
      retries: 12
  upgrade:
    remediation:
      retries: 12
  values:
    replicas: 2
    env:
      GF_EXPLORE_ENABLED: true
      GF_PANELS_DISABLE_SANITIZE_HTML: true
      GF_LOG_FILTERS: rendering:debug
      GF_DATE_FORMATS_FULL_DATE: "MMM Do, YYYY hh:mm:ss a"
      GF_SECURITY_ALLOW_EMBEDDING: true
      GF_SECURITY_COOKIE_SAMESITE: grafana
    envFromSecret: *app
    admin:
      existingSecret: grafana-admin-creds
    extraInitContainers:
      - name: init-db
        image: ghcr.io/onedr0p/postgres-initdb:14.8
        env:
          #- name: POSTGRES_RESET # True - drops the table upon init if it exists
          #  value: "false"
          #- name: POSTGRES_RESET_CONFIRM # Are you sure you want to do this?
          #  value: "NO"
          - name: POSTGRES_HOST
            value: defaultpg-rw.databases.svc.cluster.local
          - name: POSTGRES_DB
            value: *app
          - name: POSTGRES_SUPER_PASS
            valueFrom:
              secretKeyRef:
                name: postgres-superuser
                key: password
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: *app
                key: POSTGRES_USERNAME
          - name: POSTGRES_PASS
            valueFrom:
              secretKeyRef:
                name: *app
                key: POSTGRES_PASSWORD
    grafana.ini:
      server:
        root_url: "https://grafana.${SECRET_DEV_DOMAIN}"
      paths:
        data: /var/lib/grafana/data
        logs: /var/log/grafana
        plugins: /var/lib/grafana/plugins
        provisioning: /etc/grafana/provisioning
      analytics:
        check_for_updates: false
      log:
        mode: console
      database:
        type: postgres
        host: defaultpg-rw.databases.svc.cluster.local
        user: "$__env{POSTGRES_USERNAME}"
        password: "$__env{POSTGRES_PASSWORD}"
        max_idle_conn: 200
        max_open_conn: 300
        ssl_mode: disable
      grafana_net:
        url: https://grafana.net
      auth.basic:
        #disable_login_form: false
        enabled: true
      auth.anonymous:
        enabled: true
        #org_name: HomeOps
        org_id: 1
        org_role: Viewer
      auth.generic_oauth:
        enabled: true
        name: TheKaoCloud Authelia
        icon: signin
        client_id: grafana
        client_secret: ${SECRET_GRAFANA_OAUTH_CLIENT_SECRET}
        scopes: openid profile email groups
        empty_scopes: false
        auth_url: https://authelia.${SECRET_DEV_DOMAIN}/api/oidc/authorization
        token_url: https://authelia.${SECRET_DEV_DOMAIN}/api/oidc/token
        api_url: https://authelia.${SECRET_DEV_DOMAIN}/api/oidc/userinfo
        login_attribute_path: preferred_username
        groups_attribute_path: groups
        name_attribute_path: name
        use_pkce: true
#      auth.proxy:
#        enabled: true
#        header_name: Remote-User
#        header_property: username
#        auto_sign_up: false
#        sync_ttl: 60
#        whitelist: 192.168.5.10/32, 10.42.5.0/24, 10.42.4.0/24, 10.42.3.0/24, 10.42.2.0/24, 10.42.1.0/24, 10.42.0.0/24
#        headers: Email:X-User-Email, Name:X-User-Name, Group:Remote-Groups
        # Read the auth proxy docs for details on what the setting below enables
        #enable_login_token: false
#    dashboardProviders:
#      dashboardproviders.yaml:
#        apiVersion: 1
#        providers:
#          - name: "default"
#            orgId: 1
#            folder: ""
#            type: file
#            disableDeletion: false
#            editable: true
#            options:
#              path: /var/lib/grafana/dashboards/default
    datasources:
      datasources.yaml:
        apiVersion: 1
        # list of datasources that should be deleted from the database
        deleteDatasources:
          - name: Loki
            orgId: 1
        datasources:
          - name: Prometheus
            type: prometheus
            access: proxy
            url: http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090/
            isDefault: true
          - name: Loki
            type: loki
            access: proxy
            url: http://loki-read:3100
    dashboards:
      default:
#        # Ref: https://grafana.com/grafana/dashboards/7845
#        zfs:
#          gnetId: 7845
#          revision: 4
#          datasource: Prometheus
#        # Ref: https://grafana.com/grafana/dashboards/13502
        minio:
          gnetId: 13502
          revision: 10
          datasource: Prometheus
#        # Ref: https://grafana.com/grafana/dashboards/11315
#        unifi-client-insights:
#          gnetId: 11315
#          revision: 8
#          datasource: Prometheus
#        # Ref: https://grafana.com/grafana/dashboards/11311
#        unifi-network-sites:
#          gnetId: 11311
#          revision: 4
#          datasource: Prometheus
#        # Ref: https://grafana.com/grafana/dashboards/11314
#        unifi-uap-insights:
#          gnetId: 11314
#          revision: 9
#          datasource: Prometheus
#        # Ref: https://grafana.com/grafana/dashboards/11312
#        unifi-usw-insights:
#          gnetId: 11312
#          revision: 8
#          datasource: Prometheus
    sidecar:
      dashboards:
        enabled: true
        searchNamespace: ALL
        # folderAnnotation: grafana_folder
        # provider:
        #   foldersFromFilesStructure: true
      datasources:
        enabled: true
        searchNamespace: ALL
    plugins:
      - natel-discrete-panel
      - pr0ps-trackmap-panel
      - grafana-piechart-panel
      - vonage-status-panel
      - grafana-worldmap-panel
      - grafana-clock-panel
      - marcusolsson-hourly-heatmap-panel
    serviceMonitor:
      enabled: true
    persistence:
      enabled: false
    ingress:
      enabled: true
      ingressClassName: "traefik"
      annotations:
        hajimari.io/enable: "true"
        hajimari.io/icon: "chart-scatter-plot-hexbin"
        cert-manager.io/cluster-issuer: "letsencrypt-production"
        traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        traefik.ingress.kubernetes.io/router.middlewares: networking-chain-no-auth@kubernetescrd
      hosts:
        - &host "grafana.${SECRET_DEV_DOMAIN}"
      tls:
        - hosts:
            - *host
          secretName: *host

    nodeSelector:
      node-role.kubernetes.io/worker: "true"

  valuesFrom:
    - targetPath: grafana.ini.database.username
      kind: Secret
      name: *app
      valuesKey: POSTGRES_USERNAME
    - targetPath: grafana.ini.database.password
      kind: Secret
      name: *app
      valuesKey: POSTGRES_USERNAME

