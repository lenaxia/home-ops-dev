apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 46.7.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  install:
    remediation:
      retries: 7
    crds: CreateReplace
  upgrade:
    remediation:
      retries: 8
    crds: CreateReplace
  # https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
  values:
    defaultRules:
      create: true
      rules:
        alertmanager: true
        etcd: false
        configReloaders: true
        general: true
        kubelet: false
        kubeProxy: false
        kubeSchedulerAlerting: false

    # how to enable scrape endpoints for these https://github.com/k3s-io/k3s/issues/3619
    # Example in ansible: https://github.com/onedr0p/home-ops/blob/61ee0bb1a98cc427426cb98e91d1ea77c578a904/ansible/kubernetes/inventory/group_vars/master/k3s.yml
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: false
      endpoints:
        - 192.168.2.50
        - 192.168.2.51
        - 192.168.2.52
    kubeProxy:
      enabled: false
      endpoints:
        - 192.168.2.50
        - 192.168.2.51
        - 192.168.2.52
    kubeScheduler:
      enabled: false
      endpoints:
        - 192.168.2.50
        - 192.168.2.51
        - 192.168.2.52
    kubeEtcd:
      enabled: false
      endpoints:
        - 192.168.2.50
        - 192.168.2.51
        - 192.168.2.52
      service:
        enabled: false
        port: 2381
        targetPort: 2381

    alertmanager:
      enabled: true
      config:
        global:
          resolve_timeout: 5m
        receivers:
          - name: "null"
          - name: "pushover"
            pushover_configs:
              - url_title: View in Alert Manager
                token: "${SECRET_PUSHOVER_PROD_TOKEN}"
                user_key: "${SECRET_PUSHOVER_USER_KEY}"
                send_resolved: true
                html: true
                sound: gamelan
                priority: |-
                  {{ if eq .Status "firing" }}1{{ else }}0{{ end }}
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }}
                message: |-
                  {{- range .Alerts }}
                    {{- if ne .Labels.severity "" }}
                      <b>Severity:</b> <i>{{ .Labels.severity }}</i>
                    {{- else }}
                      <b>Severity:</b> <i>N/A</i>
                    {{- end }}
                    {{- if ne .Annotations.description "" }}
                      <b>Description:</b> <i>{{ .Annotations.description }}</i>
                    {{- else if ne .Annotations.summary "" }}
                      <b>Summary:</b> <i>{{ .Annotations.summary }}</i>
                    {{- else if ne .Annotations.message "" }}
                      <b>Message:</b> <i>{{ .Annotations.message }}</i>
                    {{- else }}
                      <b>Description:</b> <i>N/A</i>
                    {{- end }}
                    {{- if gt (len .Labels.SortedPairs) 0 }}
                      <b>Details:</b>
                      {{- range .Labels.SortedPairs }}
                        â€¢ <b>{{ .Name }}:</b> <i>{{ .Value }}</i>
                      {{- end }}
                    {{- end }}
                  {{- end }}
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "pushover"
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog"
            - receiver: "pushover"
              matchers:
                - severity = "critical"
              continue: true
            - receiver: "pushover"
              matchers:
                - alertname =~ "KubeNodeNotReady|KubeNodeUnreachable|KubeNodeReadinessFlapping"
              continue: true
            - receiver: "pushover"
              matchers:
                - alertname =~ "KubePodCrashLooping|KubePodNotReady"
              continue: true
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal: ["alertname", "namespace"]

      ingress:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          hajimari.io/enable: "true"
          hajimari.io/icon: "simple-icons:prometheus"
          hajimari.io/appName: "AlertManager"
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: networking-chain-no-auth@kubernetescrd
        hosts:
          - &alertUri "alerts.${SECRET_DEV_DOMAIN}"
        path: /
        pathType: Prefix
        tls:
          - hosts:
              - *alertUri
            secretName: *alertUri

      alertmanagerSpec:
        replicas: 2
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: local-path
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 5Gi

    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          enabled: true
          label: grafana_dashboard
          labelValue: "1"
    
          ## Annotations for Grafana dashboard configmaps
          ##
          annotations: {}
          multicluster:
            global:
              enabled: true
            etcd:
              enabled: true
          provider:
            allowUiUpdates: false
        datasources:
          enabled: true
          defaultDatasourceEnabled: true
          isDefaultDatasource: true
    
          uid: prometheus

    prometheusOperator:
      enabled: true
      tls:
        enabled: false
      prometheusConfigReloader:
        resources:
          limits:
            cpu: 200m
      admissionWebhooks:
        enabled: false 
        patch:
          enabled: false
      tlsProxy:
        enabled: false


    prometheus:
      enabled: true
      thanosService:
        enabled: false
      thanosServiceMonitor:
        enabled: false
      prometheusSpec:
        replicas: 2
        shards: 1
        retention: 15d
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: local-path
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 50Gi
 
      ingress:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          hajimari.io/enable: "true"
          hajimari.io/icon: "simple-icons:prometheus"
          hajimari.io/appName: "Prometheus"
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: networking-chain-no-auth@kubernetescrd
        hosts:
          - &promUri "prom.${SECRET_DEV_DOMAIN}"
        path: /
        pathType: Prefix
        tls:
          - hosts:
              - *promUri
            secretName: *promUri
