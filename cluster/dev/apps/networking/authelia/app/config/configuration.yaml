---
###############################################################
#                   Authelia configuration                    #
###############################################################

server:
    host: 0.0.0.0
    port: 9091
log:
    level: debug

# https://docs.authelia.com/configuration/miscellaneous.html#default-redirection-url
default_redirection_url: https://authelia.mikegoes.online

totp:
  issuer: mikegoes.online
  period: 30
  skew: 1

# Enable the following for Duo Push Notification support
duo_api:
  hostname: api-b68b8774.duosecurity.com
  integration_key: DI2IGENLJKFDHSKGWT1L
  # This secret can also be set using the env variables AUTHELIA_DUO_API_SECRET_KEY_FILE
  # secret_key: SECRET_KEY_GOES_HERE # use docker secret file instead AUTHELIA_DUO_API_SECRET_KEY_FILE

  ### use a file for user control
  #authentication_backend:
  #  file:
  #    path: /config/users_database.yml
  #    password:
  #      algorithm: argon2id
  #      iterations: 1
  #      salt_length: 16
  #      parallelism: 8
  #      memory: 1024 # blocks this much of the RAM. Tune this.

access_control:
  default_policy: deny
  rules:
    - domain: authelia.mikegoes.online
      policy: bypass
    - domain: "*.mikegoes.online"
      policy: bypass
      networks:
        - 10.50.0.2/32
    - domain:
        - "guac.mikegoes.online"
      policy: one_factor
      subject: "group:guacamole"
    - domain:
        - "mikegoes.online"
        - "*.mikegoes.online"
        - "dsm.mikegoes.online"
      policy: two_factor
      subject: 
        - "group:administrators"
    - domain:
        - "cloud.kao.family"
      policy: one_factor
      subject: "group:kaofamily"
    - domain:
        - "vault.mikegoes.online"
      policy: one_factor
      subject: "group:bitwarden"
    - domain:
        - "syndicate.mikegoes.online"
      policy: one_factor
      subject: "group:syndicate"
    - domain:
        - "library.mikegoes.online"
      policy: one_factor
      subject: "group:calibreweb"
    - domain:
        - "plex.mikegoes.online"
      policy: one_factor
      subject: "group:plexaccess"
    - domain:
        - "request.mikegoes.online"
        - "dl.mikegoes.online"
      policy: one_factor
      subject: "group:requestaccess"
    - domain:
        - "status.mikegoes.online"
        - "speedtest.mikegoes.online"
        - "mikegoes.online"
      policy: one_factor
      subject: "group:users"

session:
  name: authelia_session_mikegoesonline
  # This secret can also be set using the env variables AUTHELIA_SESSION_SECRET_FILE
  # secret: SECRET_GOES_HERE # use docker secret file instead AUTHELIA_SESSION_SECRET_FILE
  expiration: 1d # 24 hours
  inactivity: 1d # 24 hours
  remember_me_duration: 1M
  domain: mikegoes.online # Should match whatever your root protected domain is

  #  redis:
  #    host: redis
  #    port: 6379
  #    database_index: 10

regulation:
  max_retries: 5
  find_time: 120
  ban_time: 300

storage:
  encryption_key: rbpPcBsTMZqxlspHF0UfuEiGEzaEqohHovdjKgvkGKdBc10dWzRjwfbByf6uX+iN6G2z4soo6s1jMfA1NdlLvg==
  mysql:
      host: 192.168.0.125
      port: 3306
      database: authelia
      username: authelia
      # Password can also be set using the env variables AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE
      # password: PASSWORD_GOES_HERE # use docker secret file instead AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE

notifier:
  # For testing purposes, notifications can be sent in a file. Be sure to map the volume in docker-compose.
  #  filesystem:
  #    filename: /config/notification.txt
  smtp:
    username: AKIAWL74NM3JSZ73BVD5
    # This secret can also be set using the env variables AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE
    # password: PASSWORD_GOES_HERE # use docker secret file instead AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE
    host: email-smtp.us-west-2.amazonaws.com
    port: 587 # Or 465
    sender: mike@kao.family 
    subject: "[MikeGoesOnline] {title}"

    
authentication_backend:
  # Disable both the HTML element and the API for reset password functionality
  disable_reset_password: false

  # The amount of time to wait before we refresh data from the authentication backend. Uses duration notation.
  # To disable this feature set it to 'disable', this will slightly reduce security because for Authelia, users
  # will always belong to groups they belonged to at the time of login even if they have been removed from them in LDAP.
  # To force update on every request you can set this to '0' or 'always', this will increase processor demand.
  # See the below documentation for more information.
  # Duration Notation docs:  https://docs.authelia.com/configuration/index.html#duration-notation-format
  # Refresh Interval docs: https://docs.authelia.com/configuration/authentication/ldap.html#refresh-interval
  refresh_interval: 5m

  ldap:
    # The url to the ldap server. Scheme can be ldap:// or ldaps://
    url: ldap://192.168.0.120

    # Skip verifying the server certificate (to allow self-signed certificate).
    tls:
      skip_verify: false

    # The base dn for every entries
    base_dn: dc=kao,dc=family

    # The attribute holding the username of the user. This attribute is used to populate
    # the username in the session information. It was introduced due to #561 to handle case
    # insensitive search queries.
    # For you information, Microsoft Active Directory usually uses 'sAMAccountName' and OpenLDAP
    # usually uses 'uid'
    # Beware that this attribute holds the unique identifiers for the users binding the user and the configuration
    # stored in database. Therefore only single value attributes are allowed and the value
    # must never be changed once attributed to a user otherwise it would break the configuration
    # for that user. Technically, non-unique attributes like 'mail' can also be used but we don't recommend using
    # them, we instead advise to use the attributes mentioned above (sAMAccountName and uid) to follow
    # https://www.ietf.org/rfc/rfc2307.txt.
    username_attribute: uid
    
    # An additional dn to define the scope to all users
    additional_users_dn: cn=users
    
    # The users filter used in search queries to find the user profile based on input filled in login form.
    # Various placeholders are available to represent the user input and back reference other options of the configuration:
    # - {input} is a placeholder replaced by what the user inputs in the login form. 
    # - {username_attribute} is a placeholder replaced by what is configured in `username_attribute`.
    # - {mail_attribute} is a placeholder replaced by what is configured in `mail_attribute`.
    # - DON'T USE - {0} is an alias for {input} supported for backward compatibility but it will be deprecated in later versions, so please don't use it.
    #
    # Recommended settings are as follows:
    # - Microsoft Active Directory: (&({username_attribute}={input})(objectCategory=person)(objectClass=user))
    # - OpenLDAP: (&({username_attribute}={input})(objectClass=person))' or '(&({username_attribute}={input})(objectClass=inetOrgPerson))
    #
    # To allow sign in both with username and email, one can use a filter like
    # (&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))
    users_filter: (&({username_attribute}={input})(objectClass=inetOrgPerson))
    
    # An additional dn to define the scope of groups
    additional_groups_dn: cn=groups
    
    # The groups filter used in search queries to find the groups of the user.
    # - {input} is a placeholder replaced by what the user inputs in the login form.
    # - {username} is a placeholder replace by the username stored in LDAP (based on `username_attribute`).
    # - {dn} is a matcher replaced by the user distinguished name, aka, user DN.
    # - {username_attribute} is a placeholder replaced by what is configured in `username_attribute`.
    # - {mail_attribute} is a placeholder replaced by what is configured in `mail_attribute`.
    # - DON'T USE - {0} is an alias for {input} supported for backward compatibility but it will be deprecated in later versions, so please don't use it.
    # - DON'T USE - {1} is an alias for {username} supported for backward compatibility but it will be deprecated in later version, so please don't use it.
    groups_filter: (&(member={dn})(objectclass=posixGroup))
    
    # The attribute holding the name of the group
    group_name_attribute: cn
    
    # The attribute holding the mail address of the user
    mail_attribute: mail
    
    # The attribute holding the display name of the user. This will be used to greet an authenticated user.
    display_name_attribute: displayname

    # The username and password of the admin user. If multiple email addresses are defined for a user, only the first
    # one returned by the LDAP server is used.
    user: uid=autheliauser,cn=users,dc=kao,dc=family
    
    # Password can also be set using a secret: https://docs.authelia.com/configuration/secrets.html
    password: RjN8GK92Wija7j
